@using Lexer
@inject IJSRuntime Js

<input
    type="text"
    placeholder="Enter an expression here..."
    @oninput="OnInputChanged"
    class="@(_validInput ? "valid" : "invalid")"
/>

@code {
    [Parameter] public EventCallback<Expression> OnParsed { get; set; }
    
    private string _input = "0";
    private bool _validInput = true;
    
    private Lexer<TokenType> _lexer = null!;
    
    
    protected override void OnInitialized()
    {
        TokenRule<TokenType>[] rules =
        [
            new (TokenType.Number, @"-?\d+(\.\d+)?"),
            new (TokenType.Plus, @"\+"),
            new (TokenType.Minus, @"\-"),
            new (TokenType.Star, @"\*"),
            new (TokenType.Slash, @"\/"),
            new (TokenType.LeftParenthesis, @"\("),
            new (TokenType.RightParenthesis, @"\)"),
            new (TokenType.Pi, "pi"),
            new (TokenType.Sin, "sin"),
            new (TokenType.Cos, "cos"),
            new (TokenType.Tan, "tan"),
            new (TokenType.Whitespace, @"\s+", ignore: true),
        ];

        _lexer = new Lexer<TokenType>(rules);
    }

    private async Task OnInputChanged(ChangeEventArgs e)
    {
        _input = e.Value?.ToString() ?? "";
        if (string.IsNullOrEmpty(_input))
        {
            await Js.InvokeVoidAsync("treeInterop.clear");

            await OnParsed.InvokeAsync(null);
            return;
        }

        _validInput = true;

        Expression? node = null;
        try
        {
            var tokens = _lexer.Tokenize(_input);

            var parser = new Parser(tokens);
            node = parser.Parse();
        }
        catch
        {
            Console.WriteLine("bajs");
            _validInput = false;
        }
        finally
        {
            await OnParsed.InvokeAsync(node);
        }
    }
}